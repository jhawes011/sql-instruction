--  PG 156 Ch 5 Exercises

-- #1 Write a SELECT statement that returns two columns from the Invoices table:     VendorID and PaymentSum,     where    PaymentSum     is the sum of the PaymentTotal column.     Group the result set by VendorID.
SELECT VendorID, SUM(PaymentTotal) AS PaymentSum
FROM Invoices
GROUP BY VendorID

-- #2 Write a SELECT statement that returns two columns: VendorName and PaymentSum, where PaymentSum is the sum of the PaymentTotal column. 
-- Group the result set by VendorName.     Return only 10 rows, corresponding to the 10 vendors who’ve been paid the most. Hint

SELECT TOP 10 VendorName, SUM(PaymentTotal) AS PaymentSum
FROM Vendors V
JOIN Invoices I
ON V.VendorID = I.VendorID
GROUP BY VendorName
ORDER BY PaymentSum DESC

--#3 Write a SELECT statement that returns three columns: VendorName, InvoiceCount, and InvoiceSum. InvoiceCount is the count of the number of invoices, and InvoiceSum is the sum of the InvoiceTotal column. -- Group the result set by vendor. Sort the result set so the vendor with the highest number of invoices appears first.SELECT VendorName, COUNT(*) AS InvoiceCount, SUM(InvoiceTotal) AS InvoiceSumFROM Vendors VJOIN Invoices ION V.VendorID = I.VendorIDGROUP BY VendorNameORDER BY InvoiceCount DESC;-- #4  Write a SELECT statement that returns three columns: AccountDescription, LineItemCount, and LineItemSum. LineItemCount is the number of entries in the InvoiceLineItems table that have that AccountNo. -- LineItemSum is the sum of the InvoiceLineItemAmount column for that AccountNo. Filter the result set to include only those rows with LineItemCount greater than 1. --  Group the result set by account description, and sort it by descending LineItemCount. Hint: Join the GLAccounts table to the InvoiceLineItems tableSELECT GL.AccountDescription, COUNT(*) AS LineItemCount, SUM(InvoiceLineItemAmount) As LineItemSumFROM GLAccounts GLJOIN InvoiceLineItems ION GL.AccountNo = I.AccountNoGROUP BY GL.AccountDescriptionHAVING COUNT(*) > 1ORDER BY LineItemCount DESC;--  #5  Modify the solution to exercise 4 to filter for invoices dated from October 1, 2022 to December 31, 2022. --  Hint: Join the Invoices table so you can code a search condition based on InvoiceDate.SELECT GL.AccountDescription, COUNT(*) AS LineItemCount, SUM(InvoiceLineItemAmount) As LineItemSumFROM GLAccounts GLJOIN InvoiceLineItems ION GL.AccountNo = I.AccountNoJOIN Invoices InvON I.InvoiceID = Inv.InvoiceIDWHERE InvoiceDate BETWEEN '2022-10-1' AND '2022-12-31'GROUP BY GL.AccountDescriptionHAVING COUNT(*) > 1ORDER BY LineItemCount DESC;-- #6  Write a SELECT statement that answers the following question:--	What is the total amount invoiced for each AccountNo? --  Use the ROLLUP operator to include a row that gives the grand total.        Hint: Use the InvoiceLineItemAmount column of the InvoiceLineItems tableSELECT AccountNo, SUM(InvoiceLineItemAmount) AS TotalDueFROM InvoiceLineItemsGROUP BY ROLLUP(AccountNo)ORDER BY TotalDue DESC;-- #7 Write a SELECT statement that returns four columns: VendorName, AccountDescription, LineItemCount, and LineItemSum.-- LineItemCount is the row count, and LineItemSum is the sum of the InvoiceLineItemAmount column. -- For each vendor and account, return the number and sum of line items, sorted first by vendor, then by account description.           Hint: Use a four-table join.SELECT VendorName, AccountDescription, COUNT(*) AS LineItemCount, SUM(InvoiceLineItemAmount) AS LineItemSumFROM Vendors VJOIN Invoices ION V.VendorID = I.VendorIDJOIN InvoiceLineItems IliON I.InvoiceID = Ili.InvoiceIDJOIN GLAccounts GlON Ili.AccountNo = Gl.AccountNoGROUP BY VendorName, AccountDescriptionORDER BY VendorName, AccountDescription-- #8 Write a SELECT statement that answers this question:-- Which vendors are being paid from more than one account? -- Return two columns: the vendor name and the total number of accounts that apply to that vendor’s invoices.       Hint: Use the DISTINCT keyword to count InvoiceLineItems.AccountNoSELECT VendorName, COUNT(DISTINCT Inv.AccountNo) As [# of Accounts]FROM Vendors VJOIN Invoices ION V.VendorID = I.VendorIDJOIN InvoiceLineItems InvON I.InvoiceID = Inv.InvoiceIDGROUP BY VendorNameHaving COUNT(DISTINCT Inv.AccountNo) > 1ORDER BY VendorName--#9  Write a SELECT statement that returns six columns: --.  The result set should include the individual invoices for each vendor. SELECT VendorID, InvoiceDate, InvoiceTotal, 	SUM(InvoiceTotal) OVER (Partition BY VendorID) AS VendorTotal, 	COUNT(InvoiceTotal) OVER (PARTITION BY VendorID) AS VendorCount, 	AVG(InvoiceTotal) OVER (PARTITION BY VendorID) AS VendorAvgFROM InvoicesORDER BY VendorID;